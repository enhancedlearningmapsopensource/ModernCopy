/**
 * Wrappers allow you to extend the functionality of a simple remote object without
 * modifying the model code (which is autogenerated). Simply wrap a model to 
 * provide it with missing functions.
 * 
 */


define(["backbone"], function(Backbone){
    var BaseWrapper = Backbone.Model.extend({
        get: function(attribute){
            var thisModel = this;
            if(attribute !=="wrapped" && thisModel.attributes.hasOwnProperty("wrapped") && thisModel.attributes["wrapped"] !== null){
                return thisModel.attributes["wrapped"].get(attribute);
            }else{
                return Backbone.Model.prototype.get.call(thisModel, attribute);
            }
        },
        has: function(attribute){
            var thisModel = this;
            if(thisModel.attributes.hasOwnProperty("wrapped")){
                return thisModel.get("wrapped").has(attribute);
            }else{
                return null;
            }
        },
        set: function(attributes, options){
            var thisModel = this;
            if(attributes !=="wrapped" && thisModel.attributes.hasOwnProperty("wrapped") && thisModel.attributes["wrapped"] !== null){
                return thisModel.attributes["wrapped"].set(attributes, options);
            }else{
                Backbone.Model.prototype.set.call(thisModel, attributes, options);
            }
        }
    });
    
    var wrappers = {
        
    };
    
    BaseWrapper.extend = function (child) {
        var ex = Backbone.Model.extend.apply(this, arguments);
        ex.prototype.events = _.extend({}, this.prototype.events, child.events);
        return ex;
    };
    
    BaseWrapper.wrap = function(toWrap, implementation){
        var wrapper = null;
        if(wrappers.hasOwnProperty(toWrap.get("type"))){
            wrapper = wrappers[toWrap.get("type")]; 
        }else{
            wrapper = new implementation();
            wrappers[toWrap.get("type")] = wrapper;
        }
        
        // Clean the wrapper
        wrapper.set("wrapped", null, {silent:true});
        
        // Set the wrapped model
        wrapper.set("id", toWrap.id);
        wrapper.id = toWrap.id;
        wrapper.set("wrapped", toWrap);
        
        // Return the wrapped model
        return wrapper;
    };
    
    return BaseWrapper;
});


